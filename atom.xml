<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://maguichang.github.io</id>
    <title>maguichang</title>
    <updated>2020-04-27T01:22:55.073Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://maguichang.github.io"/>
    <link rel="self" href="https://maguichang.github.io/atom.xml"/>
    <subtitle>操千曲而后晓声，观千剑而后识器</subtitle>
    <logo>https://maguichang.github.io/images/avatar.png</logo>
    <icon>https://maguichang.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, maguichang</rights>
    <entry>
        <title type="html"><![CDATA[K8S 集群上部署、管理MySql集群]]></title>
        <id>https://maguichang.github.io/post/k8s-ji-qun-shang-bu-shu-guan-li-mysql-ji-qun/</id>
        <link href="https://maguichang.github.io/post/k8s-ji-qun-shang-bu-shu-guan-li-mysql-ji-qun/">
        </link>
        <updated>2020-04-27T01:01:28.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-mysql高可用方案">一、 MySQL高可用方案</h2>
<p>​	本文的MySQL高可用方案为主从复制+读写分离，即由单一的master和多个slave所构成。其中，客户端通过master对数据库进行写操作，通过slave端进行读操作。master出现问题后，可以将应用切换到slave端。 此方案是MySQL官方提供的一种高可用解决方案，节点间的数据同步采用MySQL Replication技术。</p>
<p>​	MySQL Replication从一个MySQL数据库服务器（master）的数据复制到一个或多个MySQL数据库服务器（slave）。在默认情况下，复制是异步的；slave不需要一直接收来自主机的更新。根据配置，可以复制数据库中的所有数据库、选定的数据库，或者特定的表。</p>
<h2 id="二-部署须知">二、部署须知</h2>
<ul>
<li>
<p>您需要拥有一个带有默认<a href="https://kubernetes.io/docs/concepts/storage/storage-classes/">StorageClass</a>的动态PersistentVolume配置器 ，或者您 自己<a href="https://kubernetes.io/docs/user-guide/persistent-volumes/#provisioning">静态配置PersistentVolumes</a>以满足 此处使用的<a href="https://kubernetes.io/docs/user-guide/persistent-volumes/#persistentvolumeclaims">PersistentVolumeClaims</a>。</p>
</li>
<li>
<p>本教程假设您熟悉 <a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/">PersistentVolumes</a> 和<a href="https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/">StatefulSets</a>，以及其他核心概念，如<a href="https://kubernetes.io/docs/concepts/workloads/pods/pod/">Pod</a>， <a href="https://kubernetes.io/docs/concepts/services-networking/service/">Services</a>和 <a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/">ConfigMaps</a>。</p>
</li>
<li>
<p>搭建mysql集群之前请保证您有一个可用的k8s集群。</p>
</li>
</ul>
<h2 id="三-部署步骤">三、部署步骤</h2>
<h4 id="31-设置动态persistentvolume">3.1 设置动态PersistentVolume</h4>
<p><strong>官网教程也是省略了这一步，没有新建PersistentVolume配置器</strong></p>
<p>(a) 新建pv1.yaml</p>
<pre><code class="language-yaml">apiVersion: v1
kind: PersistentVolume
metadata:
  labels:
    app: mysq0
  name: data-mysql-0
spec:
  #指定pv的容量为1Gi
  capacity:
    storage: 10Gi
  #指定访问模式
  accessModes:
    #pv能以readwrite模式mount到单个节点
    - ReadWriteOnce
  hostPath:
    path: /opt/mysql0
    type: DirectoryOrCreate
  #指定pv的回收策略,即pvc资源释放后的事件.recycle(不建议,使用动态供给代替)删除pvc的所有文件
  persistentVolumeReclaimPolicy: Retain
</code></pre>
<p>(b) 新建pv2.yaml</p>
<pre><code class="language-yaml">apiVersion: v1
kind: PersistentVolume
metadata:
  labels:
    app: mysql
  name: data-mysql-1
spec:
  #指定pv的容量为1Gi
  capacity:
    storage: 10Gi
  #指定访问模式
  accessModes:
    #pv能以readwrite模式mount到单个节点
    - ReadWriteOnce
  hostPath:
    path: /opt/mysql1
    type: DirectoryOrCreate
  #指定pv的回收策略,即pvc资源释放后的事件.recycle(不建议,使用动态供给代替)删除pvc的所有文件
  persistentVolumeReclaimPolicy: Retain
</code></pre>
<p>(c) 新建pv3.yaml</p>
<pre><code class="language-yaml">apiVersion: v1
kind: PersistentVolume
metadata:
  labels:
    app: mysql
  name: data-mysql-2
spec:
  #指定pv的容量为1Gi
  capacity:
    storage: 10Gi
  #指定访问模式
  accessModes:
    #pv能以readwrite模式mount到单个节点
    - ReadWriteOnce
  hostPath:
    path: /opt/mysql2
    type: DirectoryOrCreate
  #指定pv的回收策略,即pvc资源释放后的事件.recycle(不建议,使用动态供给代替)删除pvc的所有文件
  persistentVolumeReclaimPolicy: Retain
</code></pre>
<p>分别运行以上的PersistentVolume(重要，否则mysql集群会初始化失败)</p>
<pre><code>kubectl create -f pv1.yaml
kubectl create -f pv2.yaml
kubectl create -f pv3.yaml
</code></pre>
<h4 id="32-创建mysql-configmapyaml">3.2 创建mysql-configmap.yaml</h4>
<pre><code class="language-yaml">apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql
  labels:
    app: mysql
data:
  master.cnf: |
    # Apply this config only on the master.
    [mysqld]
    log-bin
    log_bin_trust_function_creators=1
    lower_case_table_names=1
  slave.cnf: |
    # Apply this config only on slaves.
    [mysqld]
    super-read-only
    log_bin_trust_function_creators=1
</code></pre>
<h4 id="33-创建-mysql-servicesyaml">3.3 创建 mysql-services.yaml</h4>
<pre><code class="language-yaml"># Headless service for stable DNS entries of StatefulSet members.
apiVersion: v1
kind: Service
metadata:
  name: mysql
  labels:
    app: mysql
spec:
  ports:
  - name: mysql
    port: 3306
  clusterIP: None
  selector:
    app: mysql
---
# Client service for connecting to any MySQL instance for reads.
# For writes, you must instead connect to the master: mysql-0.mysql.
apiVersion: v1
kind: Service
metadata:
  name: mysql-read
  labels:
    app: mysql
spec:
  ports:
  - name: mysql
    port: 3306
  selector:
    app: mysql
</code></pre>
<h4 id="34-创建mysql-statefulsetyaml">3.4 创建mysql-statefulset.yaml</h4>
<p>​	鉴于mysql为有状态服务，这里采用statefulset的方式部署</p>
<table>
<thead>
<tr>
<th>类型特性</th>
<th><strong>Deployment</strong></th>
<th><strong>StatefulSet</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>是否暴露到外网</td>
<td>可以</td>
<td>一般不</td>
</tr>
<tr>
<td>请求面向的对象</td>
<td>serviceName</td>
<td>指定pod的域名</td>
</tr>
<tr>
<td>灵活性</td>
<td>只能通过service/serviceIp访问到k8s自动转发的pod</td>
<td>可以访问任意一个自定义的pod</td>
</tr>
<tr>
<td>易用性</td>
<td>只需要关心Service的信息即可</td>
<td>需要知道要访问的pod启动的名称、headlessService名称</td>
</tr>
<tr>
<td>PV/PVC绑定关系的稳定性（多replicas）</td>
<td>（pod挂掉后重启）无法保证初始的绑定关系</td>
<td>可以保证</td>
</tr>
<tr>
<td>pod名称稳定性</td>
<td>不稳定，因为是通过template创建，每次为了避免重复都会后缀一个随机数</td>
<td>稳定，每次都一样</td>
</tr>
<tr>
<td>启动顺序（多replicas）</td>
<td>随机启动，如果pod宕掉重启，会自动分配一个node重新启动</td>
<td>pod按 app-0、app-1...app-（n-1），如果pod宕掉重启，还会在之前的node上重新启动</td>
</tr>
<tr>
<td>停止顺序（多replicas）</td>
<td>随机停止</td>
<td>倒序停止</td>
</tr>
<tr>
<td>集群内部服务发现</td>
<td>只能通过service访问到随机的pod</td>
<td>可以打通pod之间的通信（主要是被发现）</td>
</tr>
<tr>
<td>性能开销</td>
<td>无需维护pod与node、pod与PVC 等关系</td>
<td>比deployment类型需要维护额外的关系信息</td>
</tr>
</tbody>
</table>
<p>创建mysql-statefulset.yaml</p>
<pre><code class="language-yaml">apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
  serviceName: mysql
  replicas: 3
  template:
    metadata:
      labels:
        app: mysql
    spec:
      initContainers:
      - name: init-mysql
        image: mysql:5.7
        command:
        - bash
        - &quot;-c&quot;
        - |
          set -ex
          # Generate mysql server-id from pod ordinal index.
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          echo [mysqld] &gt; /mnt/conf.d/server-id.cnf
          # Add an offset to avoid reserved server-id=0 value.
          echo server-id=$((100 + $ordinal)) &gt;&gt; /mnt/conf.d/server-id.cnf
          # Copy appropriate conf.d files from config-map to emptyDir.
          if [[ $ordinal -eq 0 ]]; then
            cp /mnt/config-map/master.cnf /mnt/conf.d/
          else
            cp /mnt/config-map/slave.cnf /mnt/conf.d/
          fi
        volumeMounts:
        - name: conf
          mountPath: /mnt/conf.d
        - name: config-map
          mountPath: /mnt/config-map
      - name: clone-mysql
        image: ist0ne/xtrabackup
        command:
        - bash
        - &quot;-c&quot;
        - |
          set -ex
          # Skip the clone if data already exists.
          [[ -d /var/lib/mysql/mysql ]] &amp;&amp; exit 0
          # Skip the clone on master (ordinal index 0).
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          [[ $ordinal -eq 0 ]] &amp;&amp; exit 0
          # Clone data from previous peer.
          ncat --recv-only mysql-$(($ordinal-1)).mysql 3307 | xbstream -x -C /var/lib/mysql
          # Prepare the backup.
          xtrabackup --prepare --target-dir=/var/lib/mysql
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ALLOW_EMPTY_PASSWORD
          value: &quot;1&quot;
        ports:
        - name: mysql
          containerPort: 3306
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          exec:
            command: [&quot;mysqladmin&quot;, &quot;ping&quot;]
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            # Check we can execute queries over TCP (skip-networking is off).
            command: [&quot;mysql&quot;, &quot;-h&quot;, &quot;127.0.0.1&quot;, &quot;-e&quot;, &quot;SELECT 1&quot;]
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 1
      - name: xtrabackup
        image: ist0ne/xtrabackup
        ports:
        - name: xtrabackup
          containerPort: 3307
        command:
        - bash
        - &quot;-c&quot;
        - |
          set -ex
          cd /var/lib/mysql
          # Determine binlog position of cloned data, if any.
          if [[ -f xtrabackup_slave_info ]]; then
            # XtraBackup already generated a partial &quot;CHANGE MASTER TO&quot; query
            # because we're cloning from an existing slave.
            mv xtrabackup_slave_info change_master_to.sql.in
            # Ignore xtrabackup_binlog_info in this case (it's useless).
            rm -f xtrabackup_binlog_info
          elif [[ -f xtrabackup_binlog_info ]]; then
            # We're cloning directly from master. Parse binlog position.
            [[ `cat xtrabackup_binlog_info` =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
            rm xtrabackup_binlog_info
            echo &quot;CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\
                  MASTER_LOG_POS=${BASH_REMATCH[2]}&quot; &gt; change_master_to.sql.in
          fi
          # Check if we need to complete a clone by starting replication.
          if [[ -f change_master_to.sql.in ]]; then
            echo &quot;Waiting for mysqld to be ready (accepting connections)&quot;
            until mysql -h 127.0.0.1 -e &quot;SELECT 1&quot;; do sleep 1; done
            echo &quot;Initializing replication from clone position&quot;
            # In case of container restart, attempt this at-most-once.
            mv change_master_to.sql.in change_master_to.sql.orig
            mysql -h 127.0.0.1 &lt;&lt;EOF
          $(&lt;change_master_to.sql.orig),
            MASTER_HOST='mysql-0.mysql',
            MASTER_USER='root',
            MASTER_PASSWORD='',
            MASTER_CONNECT_RETRY=10;
          START SLAVE;
          EOF
          fi
          # Start a server to send backups when requested by peers.
          exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
            &quot;xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root&quot;
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
      - name: mysql_exporter
        env:
        - name: DATA_SOURCE_NAME
          value: root:@(127.0.0.1:3306)/
        image: prom/mysqld-exporter
        imagePullPolicy: Always
        name: mysql-exporter
        ports: 
        - containerPort: 9104
          protocol: TCP
      volumes:
      - name: conf
        emptyDir: {}
      - name: config-map
        configMap:
          name: mysql
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [&quot;ReadWriteOnce&quot;]
      resources:
        requests:
          storage: 10Gi
</code></pre>
<p>注意事项：</p>
<ul>
<li>
<p>官方文档地址为image: gcr.io/google-samples/xtrabackup:1.0</p>
<p>亲测，拉取image会失败，需要改成以下配置</p>
</li>
</ul>
<pre><code># 该镜像地址无法获取，导致mysql在pod中初始化失败
image: ist0ne/xtrabackup
</code></pre>
<pre><code>如果不确定可以，docker search  xtrabackup，查看一下可用的xtrabackup镜像
</code></pre>
<ul>
<li>由于要实现mysql集群的监控，故需要增加mysqld-exporter的image实现mysql集群信息的暴露。暴露端口9104。</li>
</ul>
<h2 id="四-mysql集群监控">四、MySQL集群监控</h2>
<h4 id="41简述">4.1简述</h4>
<p>​	Prometheus（普罗米修斯）是一套开源的监控&amp;报警&amp;时间序列数据库的组合，现在最常见的Kubernetes容器管理系统中，通常会搭配Prometheus进行监控。</p>
<p>​	Prometheus基本原理是通过HTTP协议周期性抓取被监控组件的状态，这样做的好处是任意组件只要提供HTTP接口就可以接入监控系统，不需要任何SDK或者其他的集成过程。这样做非常适合虚拟化环境比如VM或者Docker 。</p>
<h4 id="42-prometheus-安装部署">4.2 prometheus 安装部署</h4>
<p>​	本文采用docker安装prometheus 。</p>
<h5 id="421-拉取镜像">4.2.1 拉取镜像</h5>
<pre><code>docker pull prom/prometheus
</code></pre>
<h5 id="422-修改配置文件">4.2.2 修改配置文件</h5>
<p>在本机上新建需要挂载的prometheus的配置文件，与数据存储文件</p>
<pre><code class="language-yaml">vim prometheus.yml
# 写入以下内容
# my global config
global:
  scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
  # scrape_timeout is set to the global default (10s).

# Alertmanager configuration
alerting:
  alertmanagers:
  - static_configs:
    - targets:
      # - alertmanager:9093

# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
rule_files:
  # - &quot;first_rules.yml&quot;
  # - &quot;second_rules.yml&quot;

# A scrape configuration containing exactly one endpoint to scrape:
# Here it's Prometheus itself.
scrape_configs:
  # The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.
  - job_name: 'prometheus'

    # metrics_path defaults to '/metrics'
    # scheme defaults to 'http'.

    static_configs:
    - targets: ['localhost:9090']
    # k8s中mysql的集群信息
  - job_name: 'mysql-0'
    static_configs:
      - targets: ['10.244.1.6:9104']
        labels:
          instance: db1
  - job_name: 'mysql-1'
    static_configs:
      - targets: ['10.244.2.5:9104']
        labels:
          instance: db2
  - job_name: 'mysql-2'
    static_configs:
      - targets: ['10.244.0.7:9104']
</code></pre>
<h5 id="423-映射配置文件启动prometheus">4.2.3 映射配置文件启动prometheus</h5>
<pre><code class="language-bash">docker run -d --name myPrometheus -p 9090:9090 -v /opt/mgc/myPrometheus/prometheus.yml:/etc/prometheus/prometheus.yml -v /opt/mgc/myPrometheus/prometheus-data:/prometheus-data prom/prometheus
</code></pre>
<h5 id="424-访问prometheus">4.2.4 访问prometheus</h5>
<figure data-type="image" tabindex="1"><img src="https://maguichang.github.io/post-images/1587949703333.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://maguichang.github.io/post-images/1587949837946.png" alt="" loading="lazy"></figure>
<h2 id="五-mysql-数据备份与迁移">五、MySQL 数据备份与迁移</h2>
<h4 id="51-数据备份">5.1 数据备份</h4>
<p>​	由于在statefulset中的mysql集群配置，采用了挂载卷的形式存储数据到本地磁盘，故已实现了mysql的数据备份。详见3.3中的mysql-statefulset.yaml配置文件</p>
<h4 id="52-数据迁移">5.2 数据迁移</h4>
<h5 id="521-从mysql-master-写入数据">5.2.1 从mysql master 写入数据</h5>
<pre><code class="language-bash">kubectl run mysql-client --image=mysql:5.7 -i --rm --restart=Never --\
  mysql -h mysql-0.mysql &lt;&lt;EOF
CREATE DATABASE test2;
CREATE TABLE test2.messages (message VARCHAR(250));
INSERT INTO test.messages VALUES ('hello mgc');
EOF
</code></pre>
<h5 id="522-从mysql-slave读取数据">5.2.2 从mysql slave读取数据</h5>
<pre><code class="language-bash">kubectl run mysql-client --image=mysql:5.7 -i -t --rm --restart=Never -- mysql -h mysql-read -e &quot;SELECT * FROM test.messages&quot;
</code></pre>
<h5 id="523-查看集群状态">5.2.3 查看集群状态</h5>
<pre><code class="language-bash">[root@k8s-m1 mgc]# kubectl get no
NAME     STATUS   ROLES    AGE   VERSION
k8s-m1   Ready    &lt;none&gt;   72d   v1.13.5
k8s-m2   Ready    &lt;none&gt;   72d   v1.13.5
k8s-m3   Ready    &lt;none&gt;   72d   v1.13.5
</code></pre>
<h5 id="524-将节点k8s-m1设置为维护状态">5.2.4 将节点k8s-m1设置为维护状态</h5>
<pre><code class="language-bash">[root@k8s-m1 mgc]# kubectl cordon k8s-m1
node/k8s-m1 cordoned
</code></pre>
<h5 id="525-再次查看集群状态">5.2.5 再次查看集群状态</h5>
<pre><code class="language-bash">[root@k8s-m1 mgc]# kubectl get no
NAME     STATUS                     ROLES    AGE   VERSION
k8s-m1   Ready,SchedulingDisabled   &lt;none&gt;   72d   v1.13.5
k8s-m2   Ready                      &lt;none&gt;   72d   v1.13.5
k8s-m3   Ready                      &lt;none&gt;   72d   v1.13.5

[root@k8s-m1 mgc]# kubectl get pods -owide
NAME      READY   STATUS    RESTARTS   AGE     IP           NODE     NOMINATED NODE   READINESS GATES
mysql-0   3/3     Running   0          7m52s   10.244.2.6   k8s-m3   &lt;none&gt;           &lt;none&gt;
mysql-1   3/3     Running   0          46h     10.244.2.5   k8s-m3   &lt;none&gt;           &lt;none&gt;
mysql-2   3/3     Running   0          46h     10.244.0.7   k8s-m2   &lt;none&gt;           &lt;none&gt;

</code></pre>
<h5 id="526-迁移mysql-0">5.2.6 迁移mysql-0</h5>
<pre><code class="language-bash">[root@k8s-m1 mgc]# kubectl delete pod/mysql-0
pod &quot;mysql-0&quot; deleted
</code></pre>
<h5 id="527-验证数据">5.2.7 验证数据</h5>
<pre><code class="language-bash">kubectl run mysql-client --image=mysql:5.7 -i --rm --restart=Never --\
mysql -h mysql-0.mysql -e &quot;SELECT * FROM test.messages&quot;

message
hello
</code></pre>
<h5 id="528-恢复节点">5.2.8 恢复节点</h5>
<pre><code class="language-bash">kubectl uncordon k8s-m1
</code></pre>
<h2 id="六-k8s常用命令">六、k8s常用命令</h2>
<p>查看启动进度</p>
<pre><code class="language-shell">kubectl get pods -l app=mysql --watch
</code></pre>
<p>查看pod</p>
<p>kubectl get pods</p>
<pre><code>删除pod
kubectl delete pod pod名称
可以使用describe命令查看这个失败的Pod的明细：
$ kubectl describe pod fail-1034443984-jerry

]# kubectl create -f pv3.yaml

</code></pre>
<h3 id="查看pod的详情">查看pod的详情</h3>
<p>kubectl get pvc,pv,statefulset,pod,service,configmap |grep mysql</p>
<h3 id="检查pvpvc">检查pv,pvc</h3>
<pre><code class="language-bash">[root@k8s-m1 mgc]# kubectl get pvc,pv |grep mysql

persistentvolumeclaim/data-mysql-0   Bound    data-mysql-0   10Gi       RWO                           23h
persistentvolumeclaim/data-mysql-1   Bound    data-mysql-1   10Gi       RWO                           23h
persistentvolumeclaim/data-mysql-2   Bound    data-mysql-2   10Gi       RWO                           23h
persistentvolume/data-mysql-0   10Gi       RWO            Retain           Bound    default/data-mysql-0                           23h
persistentvolume/data-mysql-1   10Gi       RWO            Retain           Bound    default/data-mysql-1                           23h
persistentvolume/data-mysql-2   10Gi       RWO            Retain           Bound    default/data-mysql-2                           23h
</code></pre>
<h3 id="检查pod">检查pod</h3>
<pre><code class="language-bash">[root@k8s-m1 mgc]# kubectl get po -owide
NAME      READY   STATUS    RESTARTS   AGE   IP           NODE     NOMINATED NODE   READINESS GATES
mysql-0   2/2     Running   0          23h   10.244.1.2   k8s-m1   &lt;none&gt;           &lt;none&gt;
mysql-1   2/2     Running   0          23h   10.244.2.4   k8s-m3   &lt;none&gt;           &lt;none&gt;
mysql-2   2/2     Running   0          23h   10.244.0.6   k8s-m2   &lt;none&gt;           &lt;none&gt;
</code></pre>
<p><a href="https://segmentfault.com/a/1190000012244714">https://segmentfault.com/a/1190000012244714</a></p>
<p>查看pod的状态：</p>
<p>可以使用describe命令查看这个失败的Pod的明细：<br>
$ kubectl describe pod fail-1034443984-jerry</p>
<p>详细信息查询</p>
<p>kubectl get pod mysql-0 --output yaml</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[大数据集群生产环境部署CDH]]></title>
        <id>https://maguichang.github.io/post/da-shu-ju-ji-qun-sheng-chan-huan-jing-bu-shu-cdh/</id>
        <link href="https://maguichang.github.io/post/da-shu-ju-ji-qun-sheng-chan-huan-jing-bu-shu-cdh/">
        </link>
        <updated>2020-04-24T10:57:07.000Z</updated>
        <content type="html"><![CDATA[<h2 id="cdh-安装配置文档">CDH 安装配置文档</h2>
<blockquote>
<p>CDH (Cloudera’s Distribution, including Apache Hadoop)，是Hadoop众多分支中的一种，由Cloudera维护，基于稳定版本的Apache Hadoop构建，并集成了很多补丁，可直接用于生产环境。Cloudera Manager则是为了便于在集群中进行Hadoop等大数据处理相关的服务安装和监控管理的组件，对集群中主机、Hadoop、Hive、Spark等服务的安装配置管理做了极大简化。</p>
</blockquote>
<h4 id="readme">readme</h4>
<ul>
<li>参考若泽数据教程进行编写、汇总，亲测有效</li>
</ul>
<ol>
<li>测试集群</li>
</ol>
<table>
<thead>
<tr>
<th>虚拟机主机</th>
<th>IP</th>
<th>资源（内存/磁盘）</th>
</tr>
</thead>
<tbody>
<tr>
<td>cdh1</td>
<td>10.0.43.13</td>
<td>16GB/200G</td>
</tr>
<tr>
<td>cdh2</td>
<td>10.0.43.14</td>
<td>16GB/200G</td>
</tr>
<tr>
<td>cdh3</td>
<td>10.0.43.15</td>
<td>16GB/200G</td>
</tr>
</tbody>
</table>
<ol start="2">
<li>系统要求centos7+</li>
</ol>
<pre><code class="language-bash">[root@cdh1 ~]# cat /etc/redhat-release 
CentOS Linux release 7.5.1804 (Core)
</code></pre>
<ol start="3">
<li>软件版本与安装包准备</li>
</ol>
<p>CDH:6.3.1</p>
<p>百度网盘</p>
<p>链接：https://pan.baidu.com/s/1aAceKq5BEx86IMJVznQKtQ<br>
提取码：7ejz</p>
<pre><code class="language-bash">MySQL离线部署
mysql-5.7.27-1.el7.x86_64.rpm-bundle.tar

CM 
cm6.3.1-redhat7.tar.gz

Parcel包裹文件
CDH-6.3.1-1.cdh6.3.1.p0.1470567-el7.parcel
CDH-6.3.1-1.cdh6.3.1.p0.1470567-el7.parcel.sha1
manifest.json

环境准备
jdk-8u181-linux-x64.tar.gz
mysql-connector-java-5.1.44-bin.jar
</code></pre>
<pre><code class="language-bash">[root@cdh1 ~]# tree CDH6.3.1/
CDH6.3.1/
├── CDH-6.3.1-1.cdh6.3.1.p0.1470567-el7.parcel
├── CDH-6.3.1-1.cdh6.3.1.p0.1470567-el7.parcel.sha1
├── cm6.3.1-redhat7.tar.gz
├── jdk-8u181-linux-x64.tar.gz
├── manifest.json
├── mysql-5.7.11-linux-glibc2.5-x86_64.tar.gz
└── mysql-connector-java-5.1.47.jar

0 directories, 7 files
</code></pre>
<h3 id="一-基本环境配置">一、基本环境配置</h3>
<h4 id="11-更改主机名">1.1 更改主机名</h4>
<blockquote>
<p>(三台均需更改)</p>
</blockquote>
<ul>
<li>
<p>设置主机名</p>
<pre><code class="language-bash">hostnamectl set-hostname  cdh1
</code></pre>
</li>
<li>
<p>修改/etc/hosts文件</p>
<pre><code class="language-bash">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
10.0.43.13  cdh1
10.0.43.14  cdh2
10.0.43.15  cdh3
~ 
</code></pre>
</li>
<li>
<p>退出当前用户重新登录，则主机名已更改</p>
<pre><code class="language-bash">[root@cdh1 ~]# 
</code></pre>
</li>
</ul>
<h4 id="12-关闭防火墙-禁止开机启动-清空规则">1.2 关闭防火墙、禁止开机启动、清空规则</h4>
<blockquote>
<p>(三台均需更改)</p>
</blockquote>
<pre><code class="language-bash">[root@cdh1 ~]# systemctl stop firewalld 
[root@cdh1 ~]# systemctl disable firewalld
Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.
Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.
[root@cdh1 ~]# iptables -F 
</code></pre>
<h4 id="13-关闭selinux">1.3 关闭selinux</h4>
<blockquote>
<p>(三台均需更改)</p>
</blockquote>
<pre><code class="language-bash"># 查看状态selinux状态
getenforce
setenforce 0 #使配置立即生效
# 编辑
vi /etc/selinux/config
将SELINUX=enforcing改为SELINUX=disabled 
设置后需要重启才能生效
</code></pre>
<h4 id="14-安装ntp配置时区与时间同步">1.4  安装ntp，配置时区与时间同步</h4>
<blockquote>
<p>(三台均需更改)</p>
</blockquote>
<ul>
<li>设置时区</li>
</ul>
<pre><code class="language-bash"># date
# timedatectl --help
[root@cdh1 ~]# timedatectl set-timezone Asia/Shanghai
</code></pre>
<ul>
<li>
<p>时间同步（一主多从）</p>
<ul>
<li>
<p>安装ntp</p>
<pre><code class="language-bash">yum -y install ntp
</code></pre>
</li>
<li>
<p>主节点操作(cdh1)</p>
<ul>
<li>说明：(restrict 后为网关，即允许哪些网段&lt;10.0.43&gt;的服务器进行时间同步),mask为子网掩码</li>
</ul>
<pre><code class="language-bash">vi /etc/ntp.conf
添加
    server 127.127.1.0 iburst local clock
    restrict 10.0.43.0 mask 255.255.255.0 nomodify notrap

systemctl start ntpd
systemctl status ntpd
ntpq -p

</code></pre>
</li>
<li>
<p>次节点操作(cdh2,cdh3)</p>
<pre><code class="language-bash">[root@cdh2 ~]# systemctl stop ntpd
[root@cdh2 ~]# systemctl disable ntpd
[root@cdh2 ~]# ntpdate cdh1
24 Apr 13:56:49 ntpdate[1395]: adjust time server 10.0.43.13 offset 0.025966 sec

[root@cdh2 ~]# crontab -e
添加
    # 分 时 日 月 周，每天00:00执行该脚本
    00 00 * * * /usr/sbin/ntpdate cdh1
</code></pre>
</li>
</ul>
</li>
</ul>
<h4 id="15-安装jdk">1.5 安装jdk</h4>
<ul>
<li>3台均需安装</li>
</ul>
<pre><code class="language-bash">[root@cdh1 CDH6.3.1]# scp jdk-8u181-linux-x64.tar.gz cdh2:/root/CDH6.3.1/
[root@cdh1 CDH6.3.1]# scp jdk-8u181-linux-x64.tar.gz cdh3:/root/CDH6.3.1/
# 在三台服务器做以下操作
[root@cdh1 CDH6.3.1]# mkdir /usr/java
[root@cdh1 CDH6.3.1]# tar -zxvf jdk-8u181-linux-x64.tar.gz -C /usr/java

[root@cdh1 CDH6.3.1]# cd /usr/java/
[root@cdh1 java]# chown -R root:root /usr/java/jdk1.8.0_181
[root@cdh1 java]# vi /etc/profile
# 末尾添加
export JAVA_HOME=/usr/java/jdk1.8.0_181
export PATH=${JAVA_HOME}/bin:${PATH}
# 使生效
[root@cdh1 java]# source /etc/profile
[root@cdh1 java]# which java
/usr/java/jdk1.8.0_181/bin/java

</code></pre>
<h4 id="16-离线部署mysql">1.6 离线部署mysql</h4>
<blockquote>
<p>任选集群中一台安装mysql，这里使用cdh1</p>
</blockquote>
<ul>
<li>解压及修改my.cnf</li>
</ul>
<pre><code class="language-bash">[root@cdh1 ~]# cd CDH6.3.1/
[root@cdh1 CDH6.3.1]# tar -zxvf mysql-5.7.11-linux-glibc2.5-x86_64.tar.gz -C /usr/local

[root@cdh1 CDH6.3.1]# cd /usr/local/
[root@cdh1 local]# ls
bin  etc  games  include  lib  lib64  libexec  mysql-5.7.11-linux-glibc2.5-x86_64  sbin  share  src

[root@cdh1 local]# mv mysql-5.7.11-linux-glibc2.5-x86_64 mysql
[root@cdh1 local]# ls
bin  etc  games  include  lib  lib64  libexec  mysql  sbin  share  src


[root@cdh1 local]# mkdir mysql/arch mysql/data mysql/tmp
[root@cdh1 local]# vi /etc/my.cnf
# 清空源文件并添加如下内容
[client]
port            = 3306
socket          = /usr/local/mysql/data/mysql.sock
default-character-set=utf8mb4

[mysqld]
port            = 3306
socket          = /usr/local/mysql/data/mysql.sock

skip-slave-start

skip-external-locking
key_buffer_size = 256M
sort_buffer_size = 2M
read_buffer_size = 2M
read_rnd_buffer_size = 4M
query_cache_size= 32M
max_allowed_packet = 16M
myisam_sort_buffer_size=128M
tmp_table_size=32M

table_open_cache = 512
thread_cache_size = 8
wait_timeout = 86400
interactive_timeout = 86400
max_connections = 600

# Try number of CPU's*2 for thread_concurrency
#thread_concurrency = 32 

#isolation level and default engine 
default-storage-engine = INNODB
transaction-isolation = READ-COMMITTED

server-id  = 1739
basedir     = /usr/local/mysql
datadir     = /usr/local/mysql/data
pid-file     = /usr/local/mysql/data/hostname.pid

#open performance schema
log-warnings
sysdate-is-now

binlog_format = ROW
log_bin_trust_function_creators=1
log-error  = /usr/local/mysql/data/hostname.err
log-bin = /usr/local/mysql/arch/mysql-bin
expire_logs_days = 7

innodb_write_io_threads=16

relay-log  = /usr/local/mysql/relay_log/relay-log
relay-log-index = /usr/local/mysql/relay_log/relay-log.index
relay_log_info_file= /usr/local/mysql/relay_log/relay-log.info

log_slave_updates=1
gtid_mode=OFF
enforce_gtid_consistency=OFF

# slave
slave-parallel-type=LOGICAL_CLOCK
slave-parallel-workers=4
master_info_repository=TABLE
relay_log_info_repository=TABLE
relay_log_recovery=ON

#other logs
#general_log =1
#general_log_file  = /usr/local/mysql/data/general_log.err
#slow_query_log=1
#slow_query_log_file=/usr/local/mysql/data/slow_log.err

#for replication slave
sync_binlog = 500


#for innodb options 
innodb_data_home_dir = /usr/local/mysql/data/
innodb_data_file_path = ibdata1:1G;ibdata2:1G:autoextend

innodb_log_group_home_dir = /usr/local/mysql/arch
innodb_log_files_in_group = 4
innodb_log_file_size = 1G
innodb_log_buffer_size = 200M

#根据生产需要，调整pool size 
innodb_buffer_pool_size = 2G
#innodb_additional_mem_pool_size = 50M #deprecated in 5.6
tmpdir = /usr/local/mysql/tmp

innodb_lock_wait_timeout = 1000
#innodb_thread_concurrency = 0
innodb_flush_log_at_trx_commit = 2

innodb_locks_unsafe_for_binlog=1

#innodb io features: add for mysql5.5.8
performance_schema
innodb_read_io_threads=4
innodb-write-io-threads=4
innodb-io-capacity=200
#purge threads change default(0) to 1 for purge
innodb_purge_threads=1
innodb_use_native_aio=on

#case-sensitive file names and separate tablespace
innodb_file_per_table = 1
lower_case_table_names=1

[mysqldump]
quick
max_allowed_packet = 128M

[mysql]
no-auto-rehash
default-character-set=utf8mb4

[mysqlhotcopy]
interactive-timeout

[myisamchk]
key_buffer_size = 256M
sort_buffer_size = 256M
read_buffer = 2M
write_buffer = 2M
</code></pre>
<ul>
<li>创建用户组及用户</li>
</ul>
<pre><code class="language-bash">[root@cdh1 local]# groupadd -g 101 dba
[root@cdh1 local]# useradd -u 514 -g dba -G root -d /usr/local/mysql mysqladmin
useradd: warning: the home directory already exists.
Not copying any file from skel directory into it.
[root@cdh1 local]# cp /etc/skel/.* /usr/local/mysql
cp: omitting directory ‘/etc/skel/.’
cp: omitting directory ‘/etc/skel/..’

[root@cdh1 local]# vi mysql/.bashrc
添加
    export MYSQL_BASE=/usr/local/mysql
    export PATH=${MYSQL_BASE}/bin:$PATH

[root@cdh1 local]# chown  mysqladmin:dba /etc/my.cnf
[root@cdh1 local]# chmod  640 /etc/my.cnf  
[root@cdh1 local]# chown -R mysqladmin:dba /usr/local/mysql
[root@cdh1 local]# chmod -R 755 /usr/local/mysql 
[root@cdh1 local]# cd /usr/local/mysql
[root@cdh1 mysql]# cp support-files/mysql.server /etc/rc.d/init.d/mysql
[root@cdh1 mysql]# chmod +x /etc/rc.d/init.d/mysql
[root@cdh1 mysql]# chkconfig --add mysql
[root@cdh1 mysql]# bin/mysqld \
--defaults-file=/etc/my.cnf \
--user=mysqladmin \
--basedir=/usr/local/mysql/ \
--datadir=/usr/local/mysql/data/ \
--initialize

[root@cdh1 mysql]# cd data/
[root@cdh1 data]# ls
auto.cnf  hostname.err  ib_buffer_pool  ibdata1  ibdata2  mysql  performance_schema  sys
[root@cdh1 data]# cat hostname.err | grep password
2020-04-24T06:31:39.783722Z 1 [Note] A temporary password is generated for root@localhost: Mqgdeg:r1aEu

[root@cdh1 data]# su - mysqladmin

[mysqladmin@cdh1 ~]$ service mysql start
Starting MySQL.. SUCCESS! 

[mysqladmin@cdh1 ~]$ mysql -uroot -p
Enter password: 
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 2
Server version: 5.7.11-log

Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql&gt; 

mysql&gt; alter user root@localhost identified by 'Unidata@123';
Query OK, 0 rows affected (0.00 sec)

mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'Unidata@123';
Query OK, 0 rows affected, 1 warning (0.00 sec)

mysql&gt; flush privileges;
Query OK, 0 rows affected (0.00 sec)

mysql&gt; exit;
Bye

[mysqladmin@cdh1 ~]$ service mysql restart
Shutting down MySQL.. SUCCESS! 
Starting MySQL... SUCCESS! 

# 至此，mysql安装完成。
</code></pre>
<h4 id="17-初始化cm数据库">1.7 初始化CM数据库</h4>
<pre><code class="language-bash">[mysqladmin@cdh1 ~]$ mysql -uroot -pUnidata@123
mysql: [Warning] Using a password on the command line interface can be insecure.
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 2
Server version: 5.7.11-log MySQL Community Server (GPL)

Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql&gt; create database cmf default character set utf8;
Query OK, 1 row affected (0.00 sec)

mysql&gt; create database amon default character set utf8;
Query OK, 1 row affected (0.00 sec)

mysql&gt; grant all privileges on cmf.*  to 'cmf'@'%' identified by 'Unidata@123';
Query OK, 0 rows affected, 1 warning (0.00 sec)

mysql&gt; grant all privileges on amon.*  to 'amon'@'%' identified by 'Unidata@123';
Query OK, 0 rows affected, 1 warning (0.00 sec)

mysql&gt; flush privileges;
Query OK, 0 rows affected (0.00 sec)

mysql&gt; exit
Bye
[mysqladmin@cdh1 ~]$ exit;
logout

</code></pre>
<h4 id="18-部署mysql-connector-java">1.8 部署mysql-connector-java</h4>
<ul>
<li>3台均需安装</li>
<li>复制的时候一定要去掉mysql-connector-java-5.1.47.jar的版本号</li>
</ul>
<pre><code class="language-bash">[root@cdh1 data]# cd /root/CDH6.3.1/
[root@cdh1 CDH6.3.1]# ll
total 4131072
-rw-r--r-- 1 root root 2083878000 Apr 24 14:00 CDH-6.3.1-1.cdh6.3.1.p0.1470567-el7.parcel
-rw-r--r-- 1 root root         40 Apr 24 13:59 CDH-6.3.1-1.cdh6.3.1.p0.1470567-el7.parcel.sha1
-rw-r--r-- 1 root root 1411444147 Apr 24 14:00 cm6.3.1-redhat7.tar.gz
-rw-r--r-- 1 root root  185646832 Apr 24 14:12 jdk-8u181-linux-x64.tar.gz
-rw-r--r-- 1 root root      33887 Apr 24 13:59 manifest.json
-rw-r--r-- 1 root root  548193637 Apr 24 14:13 mysql-5.7.11-linux-glibc2.5-x86_64.tar.gz
-rw-r--r-- 1 root root    1007502 Apr 24 14:12 mysql-connector-java-5.1.47.jar

[root@cdh1 CDH6.3.1]# mkdir -p /usr/share/java
[root@cdh1 CDH6.3.1]# cp mysql-connector-java-5.1.47.jar  /usr/share/java/mysql-connector-java.jar
</code></pre>
<h3 id="二-rpm包部署cm">二、rpm包部署CM</h3>
<h4 id="21-主节点">2.1 主节点</h4>
<h5 id="211-解压安装包">2.1.1 解压安装包</h5>
<pre><code class="language-bash">[root@cdh1 CDH6.3.1]# tar -zxvf cm6.3.1-redhat7.tar.gz

[root@cdh1 CDH6.3.1]# cd cm6.3.1
[root@cdh1 cm6.3.1]# ll
total 8
drwxrwxr-x 2 2001 2001 4096 Sep 25  2019 repodata
-rw-rw-r-- 1 2001 2001 1718 Sep 25  2019 RPM-GPG-KEY-cloudera
drwxrwxr-x 4 2001 2001   34 Sep 25  2019 RPMS
drwxrwxr-x 2 2001 2001    6 Sep 25  2019 SRPMS

[root@cdh1 cm6.3.1]# cd RPMS/x86_64/
[root@cdh1 x86_64]# ll
total 1380420
-rw-r--r-- 1 2001 2001   10483568 Sep 25  2019 cloudera-manager-agent-6.3.1-1466458.el7.x86_64.rpm
-rw-r--r-- 1 2001 2001 1203832464 Sep 25  2019 cloudera-manager-daemons-6.3.1-1466458.el7.x86_64.rpm
-rw-r--r-- 1 2001 2001      11488 Sep 25  2019 cloudera-manager-server-6.3.1-1466458.el7.x86_64.rpm
-rw-r--r-- 1 2001 2001      10996 Sep 25  2019 cloudera-manager-server-db-2-6.3.1-1466458.el7.x86_64.rpm
-rw-r--r-- 1 2001 2001   14209868 Sep 25  2019 enterprise-debuginfo-6.3.1-1466458.el7.x86_64.rpm
-rw-rw-r-- 1 2001 2001  184988341 Sep 25  2019 oracle-j2sdk1.8-1.8.0+update181-1.x86_64.rpm
</code></pre>
<h5 id="212-安装cloudera-manager-daemonsserver">2.1.2 安装cloudera-manager-daemons，server</h5>
<pre><code class="language-bash">[root@cdh1 x86_64]# rpm -ivh cloudera-manager-daemons-6.3.1-1466458.el7.x86_64.rpm --nodeps --force
warning: cloudera-manager-daemons-6.3.1-1466458.el7.x86_64.rpm: Header V3 RSA/SHA256 Signature, key ID b0b19c9f: NOKEY
Preparing...                          ################################# [100%]
Updating / installing...
   1:cloudera-manager-daemons-6.3.1-14################################# [100%]
</code></pre>
<pre><code class="language-bash">[root@cdh1 x86_64]# rpm -ivh cloudera-manager-server-6.3.1-1466458.el7.x86_64.rpm --nodeps --force
warning: cloudera-manager-server-6.3.1-1466458.el7.x86_64.rpm: Header V3 RSA/SHA256 Signature, key ID b0b19c9f: NOKEY
Preparing...                          ################################# [100%]
Updating / installing...
   1:cloudera-manager-server-6.3.1-146################################# [100%]
Created symlink from /etc/systemd/system/multi-user.target.wants/cloudera-scm-server.service to /usr/lib/systemd/system/cloudera-scm-server.service.
</code></pre>
<pre><code class="language-bash">[root@cdh1 x86_64]# cd /etc/cloudera-scm-server/
[root@cdh1 cloudera-scm-server]# ll
total 20
-rw-r--r-- 1 root         root         8197 Sep 25  2019 cmSubCaCert.profile
-rw------- 1 cloudera-scm cloudera-scm  757 Sep 25  2019 db.properties
-rw-r--r-- 1 root         root         3027 Sep 25  2019 log4j.properties
</code></pre>
<ul>
<li>更改如下内容
<ul>
<li>com.cloudera.cmf.db.host=cdh1:3306</li>
<li>com.cloudera.cmf.db.name=cmf（注释放开）</li>
<li>com.cloudera.cmf.db.user=cmf（注释放开）</li>
<li>com.cloudera.cmf.db.password=Unidata@123（配置初始化数据库时的密码）</li>
<li>com.cloudera.cmf.db.setupType=EXTERNAL（修改为EXTERNAL）</li>
</ul>
</li>
</ul>
<pre><code class="language-bash">[root@cdh1 cloudera-scm-server]# vi db.properties 
# Copyright (c) 2012 Cloudera, Inc. All rights reserved.
#
# This file describes the database connection.
#

# The database type
# Currently 'mysql', 'postgresql' and 'oracle' are valid databases.
com.cloudera.cmf.db.type=mysql

# The database host
# If a non standard port is needed, use 'hostname:port'
com.cloudera.cmf.db.host=cdh1:3306

# The database name
com.cloudera.cmf.db.name=cmf

# The database user
com.cloudera.cmf.db.user=cmf

# The database user's password
com.cloudera.cmf.db.password=Unidata@123

# The db setup type
# After fresh install it is set to INIT
# and will be changed post config.
# If scm-server uses Embedded DB then it is set to EMBEDDED
# If scm-server uses External DB then it is set to EXTERNAL
com.cloudera.cmf.db.setupType=EXTERNAL
</code></pre>
<ul>
<li>启动cloudera-scm-server</li>
</ul>
<pre><code class="language-bash">[root@cdh1 cloudera-scm-server]# service cloudera-scm-server start
Redirecting to /bin/systemctl start cloudera-scm-server.service
[root@cdh1 cloudera-scm-server]# service cloudera-scm-server status
Redirecting to /bin/systemctl status cloudera-scm-server.service
● cloudera-scm-server.service - Cloudera CM Server Service
   Loaded: loaded (/usr/lib/systemd/system/cloudera-scm-server.service; enabled; vendor preset: disabled)
   Active: active (running) since Fri 2020-04-24 15:07:25 CST; 3s ago
  Process: 3785 ExecStartPre=/opt/cloudera/cm/bin/cm-server-pre (code=exited, status=0/SUCCESS)
 Main PID: 3788 (java)
   CGroup: /system.slice/cloudera-scm-server.service
           └─3788 /usr/java/jdk1.8.0_181/bin/java -cp .:/usr/share/java/mysql-connector-java.jar:/usr/share/java/oracle-connector-java.jar:/...

Apr 24 15:07:25 cdh1 systemd[1]: Starting Cloudera CM Server Service...
Apr 24 15:07:25 cdh1 systemd[1]: Started Cloudera CM Server Service.
Apr 24 15:07:25 cdh1 cm-server[3788]: JAVA_HOME=/usr/java/jdk1.8.0_181
Apr 24 15:07:25 cdh1 cm-server[3788]: Java HotSpot(TM) 64-Bit Server VM warning: ignoring option MaxPermSize=256m; support was removed in 8.0
Apr 24 15:07:26 cdh1 cm-server[3788]: ERROR StatusLogger No log4j2 configuration file found. Using default configuration: logging on...logging.
Apr 24 15:07:28 cdh1 cm-server[3788]: Fri Apr 24 15:07:28 CST 2020 WARN: Establishing SSL connection without server's identity verif...g applic
Apr 24 15:07:28 cdh1 cm-server[3788]: Fri Apr 24 15:07:28 CST 2020 WARN: Establishing SSL connection without server's identity verif...g applic
Apr 24 15:07:28 cdh1 cm-server[3788]: Fri Apr 24 15:07:28 CST 2020 WARN: Establishing SSL connection without server's identity verif...g applic
Apr 24 15:07:28 cdh1 cm-server[3788]: Fri Apr 24 15:07:28 CST 2020 WARN: Establishing SSL connection without server's identity verif...g applic
Apr 24 15:07:28 cdh1 cm-server[3788]: Fri Apr 24 15:07:28 CST 2020 WARN: Establishing SSL connection without server's identity verif...g applic
Hint: Some lines were ellipsized, use -l to show in full.

</code></pre>
<blockquote>
<p>此处启动一个新的主节点窗口，检查cloudera-scm-server服务启动日志<br>
出现7180，则证明成功，否则检查log文件，寻找问题<br>
网页打开10.0.43.13:7180,维持不动</p>
</blockquote>
<pre><code class="language-bash">[root@cdh1 cloudera-scm-server]# cd /var/log/cloudera-scm-server/
[root@cdh1 cloudera-scm-server]# tail -f cloudera-scm-server.log 
...
...
ServerConnector@614c849c{HTTP/1.1,[http/1.1]}{0.0.0.0:7180}
2020-04-24 15:09:38,766 INFO WebServerImpl:org.eclipse.jetty.server.Server: Started @133257ms
2020-04-24 15:09:38,766 INFO WebServerImpl:com.cloudera.server.cmf.WebServerImpl: Started Jetty server.
</code></pre>
<ul>
<li>安装、启动agent</li>
</ul>
<pre><code class="language-bash">[root@cdh1 ~]# cd CDH6.3.1/cm6.3.1/RPMS/x86_64/
[root@cdh1 x86_64]# rpm -ivh cloudera-manager-agent-6.3.1-1466458.el7.x86_64.rpm --nodeps --force
warning: cloudera-manager-agent-6.3.1-1466458.el7.x86_64.rpm: Header V3 RSA/SHA256 Signature, key ID b0b19c9f: NOKEY
Preparing...                          ################################# [100%]
Updating / installing...
   1:cloudera-manager-agent-6.3.1-1466################################# [100%]
Created symlink from /etc/systemd/system/multi-user.target.wants/cloudera-scm-agent.service to /usr/lib/systemd/system/cloudera-scm-agent.service.
Created symlink from /etc/systemd/system/multi-user.target.wants/supervisord.service to /usr/lib/systemd/system/supervisord.service.


[root@cdh1 x86_64]# vi /etc/cloudera-scm-agent/config.ini

修改
server_host=localhost
为
server_host=cdh1
</code></pre>
<h5 id="213-分发daemons-agent到从节点">2.1.3 分发daemons、agent到从节点</h5>
<pre><code class="language-bash">[root@cdh1 x86_64]# scp cloudera-manager-daemons-6.3.1-1466458.el7.x86_64.rpm cdh2:/root/CDH6.3.1/
[root@cdh1 x86_64]# scp cloudera-manager-daemons-6.3.1-1466458.el7.x86_64.rpm cdh3:/root/CDH6.3.1/
[root@cdh1 x86_64]# scp cloudera-manager-agent-6.3.1-1466458.el7.x86_64.rpm cdh2:/root/CDH6.3.1/
[root@cdh1 x86_64]# scp cloudera-manager-agent-6.3.1-1466458.el7.x86_64.rpm cdh3:/root/CDH6.3.1/
</code></pre>
<h4 id="22-从节点">2.2 从节点</h4>
<pre><code class="language-bash"># cdh2
[root@cdh2 CDH6.3.1]# rpm -ivh cloudera-manager-daemons-6.3.1-1466458.el7.x86_64.rpm --nodeps --force
[root@cdh2 CDH6.3.1]# rpm -ivh cloudera-manager-agent-6.3.1-1466458.el7.x86_64.rpm --nodeps --force
[root@cdh1 x86_64]# vi /etc/cloudera-scm-agent/config.ini

修改
server_host=localhost
为
server_host=cdh1
# cdh3
[root@cdh3 CDH6.3.1]# rpm -ivh cloudera-manager-daemons-6.3.1-1466458.el7.x86_64.rpm --nodeps --force
[root@cdh3 CDH6.3.1]# rpm -ivh cloudera-manager-agent-6.3.1-1466458.el7.x86_64.rpm --nodeps --force
[root@cdh1 x86_64]# vi /etc/cloudera-scm-agent/config.ini

修改
server_host=localhost
为
server_host=cdh1
</code></pre>
<h4 id="23-启动agent服务主-从节点">2.3 启动agent服务（主、从节点）</h4>
<ul>
<li>yum install -y perl (一定要装，否则后面启动会报错)</li>
</ul>
<pre><code class="language-bash">[root@cdh1 x86_64]# service cloudera-scm-agent start
Redirecting to /bin/systemctl start cloudera-scm-agent.service
[root@cdh1 x86_64]# service cloudera-scm-agent status
Redirecting to /bin/systemctl status cloudera-scm-agent.service
● cloudera-scm-agent.service - Cloudera Manager Agent Service
   Loaded: loaded (/usr/lib/systemd/system/cloudera-scm-agent.service; enabled; vendor preset: disabled)
   Active: active (running) since Fri 2020-04-24 16:28:02 CST; 4s ago
 Main PID: 4079 (cmagent)
   CGroup: /system.slice/cloudera-scm-agent.service
           └─4079 /usr/bin/python2 /opt/cloudera/cm-agent/bin/cm agent

Apr 24 16:28:03 cdh1 cm[4079]: [24/Apr/2020 16:28:03 +0000] 4079 MainThread agent        INFO     Found database jar: /opt/cloudera....jre7.jar
Apr 24 16:28:03 cdh1 cm[4079]: [24/Apr/2020 16:28:03 +0000] 4079 MainThread agent        INFO     Not starting a new session.
Apr 24 16:28:03 cdh1 cm[4079]: [24/Apr/2020 16:28:03 +0000] 4079 MainThread agent        INFO     Re-using pre-existing directory: ...scm-agent
Apr 24 16:28:03 cdh1 cm[4079]: [24/Apr/2020 16:28:03 +0000] 4079 MainThread agent        INFO     Re-using pre-existing directory: ...upervisor
Apr 24 16:28:03 cdh1 cm[4079]: [24/Apr/2020 16:28:03 +0000] 4079 MainThread agent        INFO     Re-using pre-existing directory: ...ent/flood
Apr 24 16:28:03 cdh1 cm[4079]: [24/Apr/2020 16:28:03 +0000] 4079 MainThread agent        INFO     Re-using pre-existing directory: ...r/include
Apr 24 16:28:03 cdh1 cm[4079]: [24/Apr/2020 16:28:03 +0000] 4079 MainThread agent        INFO     Re-using pre-existing directory: ...t/cgroups
Apr 24 16:28:03 cdh1 cm[4079]: [24/Apr/2020 16:28:03 +0000] 4079 MainThread agent        INFO     Re-using pre-existing directory: ...t/process
Apr 24 16:28:03 cdh1 cm[4079]: [24/Apr/2020 16:28:03 +0000] 4079 MainThread tmpfs        INFO     Successfully mounted tmpfs at /va...t/process
Apr 24 16:28:03 cdh1 cm[4079]: [24/Apr/2020 16:28:03 +0000] 4079 MainThread logging      INFO     Logging to /var/log/cloudera-scm-...agent.log
Hint: Some lines were ellipsized, use -l to show in full.
</code></pre>
<h4 id="24-web页面配置信息">2.4 web页面配置信息</h4>
<ul>
<li>
<p>网页打开10.0.43.13:7180，登录(admin/admin)</p>
<figure data-type="image" tabindex="1"><img src="https://maguichang.github.io/post-images/1587725987979.png" alt="" loading="lazy"></figure>
</li>
<li>
<p>step 1: 开始配置</p>
</li>
</ul>
<figure data-type="image" tabindex="2"><img src="https://maguichang.github.io/post-images/1587726035320.png" alt="" loading="lazy"></figure>
<ul>
<li>step2：设置集群名称</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://maguichang.github.io/post-images/1587726057643.png" alt="" loading="lazy"></figure>
<ul>
<li>step3：确认主机</li>
</ul>
<figure data-type="image" tabindex="4"><img src="https://maguichang.github.io/post-images/1587726123372.png" alt="" loading="lazy"></figure>
<ul>
<li>step4：准备parcel(主节点，包裹文件)</li>
</ul>
<figure data-type="image" tabindex="5"><img src="https://maguichang.github.io/post-images/1587726142148.png" alt="" loading="lazy"></figure>
<pre><code class="language-bash"># 主节点操作
[root@cdh1 CDH6.3.1]# yum install -y httpd
[root@cdh1 CDH6.3.1]# mkdir /var/www/html/cdh6_parcel
[root@cdh1 CDH6.3.1]# mv CDH-6.3.1-1.cdh6.3.1.p0.1470567-el7.parcel /var/www/html/cdh6_parcel
# 复制并改名，去掉末尾的sha1的1
[root@cdh1 CDH6.3.1]# mv CDH-6.3.1-1.cdh6.3.1.p0.1470567-el7.parcel.sha1 /var/www/html/cdh6_parcel/CDH-6.3.1-1.cdh6.3.1.p0.1470567-el7.parcel.sha
[root@cdh1 CDH6.3.1]# mv manifest.json /var/www/html/cdh6_parcel

[root@cdh1 CDH6.3.1]# ll /var/www/html/cdh6_parcel
total 2035080
-rw-r--r-- 1 root root 2083878000 Apr 24 14:00 CDH-6.3.1-1.cdh6.3.1.p0.1470567-el7.parcel
-rw-r--r-- 1 root root         40 Apr 24 13:59 CDH-6.3.1-1.cdh6.3.1.p0.1470567-el7.parcel.sha
-rw-r--r-- 1 root root      33887 Apr 24 13:59 manifest.json

[root@cdh1 CDH6.3.1]# service httpd start
</code></pre>
<ul>
<li>step5: web打开10.0.43.13/cdh6_parcel,验证httpd启动结果</li>
</ul>
<figure data-type="image" tabindex="6"><img src="https://maguichang.github.io/post-images/1587726155912.png" alt="" loading="lazy"></figure>
<ul>
<li>
<p>step6：选择存储库</p>
<figure data-type="image" tabindex="7"><img src="https://maguichang.github.io/post-images/1587726168403.png" alt="" loading="lazy"></figure>
</li>
</ul>
<figure data-type="image" tabindex="8"><img src="https://maguichang.github.io/post-images/1587726179344.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="9"><img src="https://maguichang.github.io/post-images/1587726188062.png" alt="" loading="lazy"></figure>
<ul>
<li>step7：安装CDH（安装需要一段时间）</li>
</ul>
<figure data-type="image" tabindex="10"><img src="https://maguichang.github.io/post-images/1587726198862.png" alt="" loading="lazy"></figure>
<ul>
<li>step8: 检查集群</li>
</ul>
<figure data-type="image" tabindex="11"><img src="https://maguichang.github.io/post-images/1587726208109.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="12"><img src="https://maguichang.github.io/post-images/1587726219968.png" alt="" loading="lazy"></figure>
<p><strong>接下来逐一修复各问题</strong></p>
<ul>
<li>修复时间同步</li>
</ul>
<pre><code class="language-bash"># cdh2
[root@cdh2 CDH6.3.1]# ntpdate cdh1
24 Apr 17:18:46 ntpdate[5056]: adjust time server 10.0.43.13 offset 0.000121 sec
# cdh3
[root@cdh3 CDH6.3.1]# ntpdate cdh1
24 Apr 17:18:50 ntpdate[5273]: adjust time server 10.0.43.13 offset 0.000079 sec
</code></pre>
<ul>
<li>swappiness设置（主、从各节点）</li>
</ul>
<pre><code class="language-bash">[root@cdh1 CDH6.3.1]# sysctl vm.swappiness=10
echo 'vm.swappiness=10'&gt;&gt; /etc/sysctl.confvm.swappiness = 10
[root@cdh1 CDH6.3.1]# echo 'vm.swappiness=10'&gt;&gt; /etc/sysctl.conf
</code></pre>
<ul>
<li>修复透明大页面（主、从各节点）</li>
</ul>
<pre><code class="language-bash">[root@cdh1 CDH6.3.1]# echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag
[root@cdh1 CDH6.3.1]# echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled
</code></pre>
<ul>
<li>修复Psycopg2版本较低(主、从各节点)</li>
</ul>
<pre><code class="language-bash"># 首先在各个节点安装pip
yum -y install epel-release               
yum -y install python-pip
yum -y install postgresql-server
# 查看pip的版本
[root@cdh1 CDH6.3.1]# pip --version
pip 8.1.2 from /usr/lib/python2.7/site-packages (python 2.7)

# 更改pip源，这样速度会快一点
[root@cdh1 CDH6.3.1]# mkdir /root/.pip
[root@cdh1 CDH6.3.1]# vi /root/.pip/pip.conf

添加如下内容：
[global]
index-url=http://mirrors.aliyun.com/pypi/simple/

[install]
trusted-host=mirrors.aliyun.com

# 更新pip
[root@cdh1 CDH6.3.1]# pip install --upgrade pip
Collecting pip
  Downloading http://mirrors.aliyun.com/pypi/packages/54/0c/d01aa759fdc501a58f431eb594a17495f15b88da142ce14b5845662c13f3/pip-20.0.2-py2.py3-none-any.whl (1.4MB)
    100% |████████████████████████████████| 1.4MB 29.0MB/s 
Installing collected packages: pip
  Found existing installation: pip 8.1.2
    Uninstalling pip-8.1.2:
      Successfully uninstalled pip-8.1.2
Successfully installed pip-20.0.2

# 安装psycopg2
[root@cdh1 CDH6.3.1]# pip install psycopg2==2.7.5 --ignore-installed
</code></pre>
<ul>
<li>step9: 重新检查集群</li>
</ul>
<figure data-type="image" tabindex="13"><img src="https://maguichang.github.io/post-images/1587726238468.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="14"><img src="https://maguichang.github.io/post-images/1587726247296.png" alt="" loading="lazy"></figure>
<ul>
<li>step10: 集群设置</li>
</ul>
<figure data-type="image" tabindex="15"><img src="https://maguichang.github.io/post-images/1587726259727.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="16"><img src="https://maguichang.github.io/post-images/1587726270049.png" alt="" loading="lazy"></figure>
<ul>
<li>step11： 自定义角色</li>
</ul>
<figure data-type="image" tabindex="17"><img src="https://maguichang.github.io/post-images/1587726281356.png" alt="" loading="lazy"></figure>
<ul>
<li>step12: 数据库设置</li>
</ul>
<figure data-type="image" tabindex="18"><img src="https://maguichang.github.io/post-images/1587726290267.png" alt="" loading="lazy"></figure>
<ul>
<li>step13：审核更改
<ul>
<li>不做变更</li>
</ul>
</li>
<li>step14：首次运行</li>
</ul>
<figure data-type="image" tabindex="19"><img src="https://maguichang.github.io/post-images/1587726298688.png" alt="" loading="lazy"></figure>
<ul>
<li>step15： 完成</li>
</ul>
<figure data-type="image" tabindex="20"><img src="https://maguichang.github.io/post-images/1587726310383.png" alt="" loading="lazy"></figure>
<p><img src="https://maguichang.github.io/post-images/1587726324044.png" alt="" loading="lazy"><br>
<img src="https://maguichang.github.io/post-images/1587726336970.png" alt="" loading="lazy"><br>
<img src="https://maguichang.github.io/post-images/1587726343176.png" alt="" loading="lazy"></p>
<p><em><strong>注：根据实际情况调节配置，逐一修复相关问题。也可以选择抑制(supress)。</strong></em></p>
<figure data-type="image" tabindex="21"><img src="https://maguichang.github.io/post-images/1587726350596.png" alt="" loading="lazy"></figure>
<h3 id="三-部署hive与hue">三、部署HIVE与HUE</h3>
<h4 id="31-mysql中配置hive-hue元数据">3.1 mysql中配置hive、hue元数据</h4>
<pre><code class="language-bash">[root@cdh1 CDH6.3.1]# su mysqladmin
[mysqladmin@cdh1 CDH6.3.1]$ mysql -uroot -pUnidata@123
mysql: [Warning] Using a password on the command line interface can be insecure.
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 422
Server version: 5.7.11-log MySQL Community Server (GPL)

Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql&gt; CREATE DATABASE hive DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
Query OK, 1 row affected (0.02 sec)

mysql&gt; CREATE DATABASE hue DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
Query OK, 1 row affected (0.00 sec)

mysql&gt; GRANT ALL ON hive.* TO 'hive'@'%' IDENTIFIED BY 'Unidata@123';
Query OK, 0 rows affected, 1 warning (0.03 sec)

mysql&gt; GRANT ALL ON hue.* TO 'hue'@'%' IDENTIFIED BY 'Unidata@123';
Query OK, 0 rows affected, 1 warning (0.00 sec)

mysql&gt; flush privileges;
Query OK, 0 rows affected (0.00 sec)

</code></pre>
<h4 id="32-web页面安装服务">3.2 web页面安装服务</h4>
<p><img src="https://maguichang.github.io/post-images/1587726361078.png" alt="" loading="lazy"><br>
<img src="https://maguichang.github.io/post-images/1587726369695.png" alt="" loading="lazy"></p>
<p><img src="https://maguichang.github.io/post-images/1587726377025.png" alt="" loading="lazy"><br>
<img src="https://maguichang.github.io/post-images/1587726391655.png" alt="" loading="lazy"><br>
<img src="https://maguichang.github.io/post-images/1587726398136.png" alt="" loading="lazy"></p>
<figure data-type="image" tabindex="22"><img src="https://maguichang.github.io/post-images/1587726409183.png" alt="" loading="lazy"></figure>
<ul>
<li>相同方式添加hue</li>
<li>数据库验证的时候报错如下:</li>
</ul>
<figure data-type="image" tabindex="23"><img src="https://maguichang.github.io/post-images/1587726416526.png" alt="" loading="lazy"></figure>
<ul>
<li>查看错误日志</li>
</ul>
<pre><code class="language-bash">[root@cdh1 cloudera-scm-server]# tail -f cloudera-scm-server.log 
    from lxml import html
  File &quot;/opt/cloudera/parcels/CDH-6.3.1-1.cdh6.3.1.p0.1470567/lib/hue/build/env/lib/python2.7/site-packages/lxml-3.3.6-py2.7-linux-x86_64.egg/lxml/html/__init__.py&quot;, line 42, in &lt;module&gt;
    from lxml import etree
ImportError: libxslt.so.1: cannot open shared object file: No such file or directory

2020-04-24 18:33:56,604 ERROR CommandPusher:com.cloudera.cmf.model.DbCommand: Command 161(HueTestDatabaseConnection) has completed. finalstate:FINISHED, success:false, msg:Unexpected error. Unable to verify database connection.
2020-04-24 18:33:59,364 INFO scm-web-311:com.cloudera.enterprise.JavaMelodyFacade: Entering HTTP Operation: Method:POST, Path:/dbTestConn/checkConnectionResult
2020-04-24 18:33:59,367 INFO scm-web-311:com.cloudera.enterprise.JavaMelodyFacade: Exiting HTTP Operation: Method:POST, Path:/dbTestConn/checkConnectionResult, Status:200
2020-04-24 18:34:36,090 INFO avro-servlet-hb-processor-1:com.cloudera.server.common.AgentAvroServlet: (12 skipped) AgentAvroServlet: heartbeat processing stats: average=10ms, min=4ms, max=229ms.
2020-04-24 18:35:36,137 INFO avro-servlet-hb-processor-1:com.cloudera.server.common.AgentAvroServlet: (11 skipped) AgentAvroServlet: heartbeat processing stats: average=10ms, min=4ms, max=229ms.


[root@cdh1 CDH6.3.1]# yum -y install libxml2-python
[root@cdh1 CDH6.3.1]# yum -y install python3-lxml

</code></pre>
<ul>
<li>hue数据库设置，再次验证</li>
</ul>
<figure data-type="image" tabindex="24"><img src="https://maguichang.github.io/post-images/1587726424897.png" alt="" loading="lazy"></figure>
<ul>
<li>部署完成结果如下</li>
</ul>
<figure data-type="image" tabindex="25"><img src="https://maguichang.github.io/post-images/1587726431090.png" alt="" loading="lazy"></figure>
<ul>
<li>打开hue链接（登录hue/hue）</li>
</ul>
<p><img src="https://maguichang.github.io/post-images/1587726436961.png" alt="" loading="lazy"><br>
<img src="https://maguichang.github.io/post-images/1587726443296.png" alt="" loading="lazy"></p>
<ul>
<li>解决报错</li>
</ul>
<figure data-type="image" tabindex="26"><img src="https://maguichang.github.io/post-images/1587726448984.png" alt="" loading="lazy"></figure>
<pre><code class="language-bash"># 3台均操作
[root@cdh1 CDH6.3.1]# yum -y install cyrus-sasl-plain  cyrus-sasl-devel  cyrus-sasl-gssapi
# 重启hue则问题解决
</code></pre>
<h4 id="33-其它服务数据库初始化">3.3 其它服务数据库初始化</h4>
<pre><code class="language-mysql">需要建的库有
rman、metastore、sentry、nav、navms、oozie
# 建库
CREATE DATABASE rman DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
GRANT ALL ON rman.* TO 'rman'@'%' IDENTIFIED BY 'unidata';
CREATE DATABASE metastore DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
GRANT ALL ON metastore.* TO 'metastore'@'%' IDENTIFIED BY 'unidata';
CREATE DATABASE sentry DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
GRANT ALL ON sentry.* TO 'sentry'@'%' IDENTIFIED BY 'unidata';
CREATE DATABASE nav DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
GRANT ALL ON nav.* TO 'nav'@'%' IDENTIFIED BY 'unidata';
CREATE DATABASE navms DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
GRANT ALL ON navms.* TO 'navms'@'%' IDENTIFIED BY 'unidata';
CREATE DATABASE oozie DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
GRANT ALL ON oozie.* TO 'oozie'@'%' IDENTIFIED BY 'unidata';

</code></pre>
<h3 id="四-问题反馈">四、问题反馈</h3>
<p>maguichang@unicloud.com</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[linux修改常用下载源]]></title>
        <id>https://maguichang.github.io/post/linux-xiu-gai-chang-yong-xia-zai-yuan/</id>
        <link href="https://maguichang.github.io/post/linux-xiu-gai-chang-yong-xia-zai-yuan/">
        </link>
        <updated>2020-04-22T02:11:22.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-pip">一、pip</h2>
<h3 id="11-linux下pip安装">1.1 linux下pip安装</h3>
<pre><code class="language-bash">yum -y install epel-release
yum -y install python-pip      
# 查看pip版本
pip --version
# 更新pip
pip install --upgrade pip

</code></pre>
<h3 id="12-pip源更换">1.2 pip源更换</h3>
<pre><code class="language-bash">mkdir /root/.pip
cd /root/.pip
vim pip.conf
[global]
index-url=http://mirrors.aliyun.com/pypi/simple/
[install]
trusted-host=mirrors.aliyun.com
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL离线安装自动化部署脚本]]></title>
        <id>https://maguichang.github.io/post/mysql-chi-xian-an-zhuang-zi-dong-hua-bu-shu-jiao-ben/</id>
        <link href="https://maguichang.github.io/post/mysql-chi-xian-an-zhuang-zi-dong-hua-bu-shu-jiao-ben/">
        </link>
        <updated>2020-04-19T06:36:01.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-版本-5727">1、 版本 5.7.27</h2>
<h2 id="2-安装包">2、安装包</h2>
<ul>
<li>mysql-5.7.27-1.el7.x86_64.rpm-bundle.tar</li>
</ul>
<h2 id="3-部署脚本">3、 部署脚本</h2>
<ul>
<li>在mysql安装包同级目录，新建mysql_install.sh,写入以下内容</li>
</ul>
<pre><code class="language-bash">#!/bin/bash
INSTALL_PACKAGE_PATH=&quot;./mysql-5.7.27-1.el7.x86_64.rpm-bundle.tar&quot;
 
function init_environment(){
    rpm -e --nodeps mariadb-libs
    echo &quot;uninstall about mariadb&quot;
}
 
function change_password(){
    findpass=$(grep 'temporary password' /var/log/mysqld.log)
    initpass=${findpass##* }
    echo $initpass
    NEWPASS=&quot;Root@123456&quot;
    echo $NEWPASS
    SQL=&quot;ALTER USER 'root'@'localhost' IDENTIFIED BY \&quot;${NEWPASS}\&quot;;GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY \&quot;${NEWPASS}\&quot; WITH GRANT OPTION;flush privileges;&quot;
    echo $SQL
    mysql --connect-expired-password --password=&quot;$initpass&quot; -e &quot;${SQL}&quot;
    if [ $? -eq 0 ]
    then
        echo &quot;change password success&quot;
    else
        echo &quot;change password fail&quot;
        exit
    fi
} 
 
function install(){
    yum -y install libaio numactl libaio-devel autoconf net-tools perl
	init_environment
    echo &quot;Start the installation&quot;
    tar -xvf $INSTALL_PACKAGE_PATH
    RPM_EXE=`ls |grep mysql-community-common*`
    rpm -ivh $RPM_EXE
    RPM_EXE=`ls |grep mysql-community-libs-8*`
    rpm -ivh $RPM_EXE
    RPM_EXE=`ls |grep mysql-community-client*`
    rpm -ivh $RPM_EXE
    RPM_EXE=`ls |grep mysql-community-server*`
    rpm -ivh $RPM_EXE
    groupadd mysql
    useradd -g mysql mysql
    mysqld --initialize --user=mysql
    mysqld --initialize-insecure --user=mysql
    systemctl start mysqld
    change_password
}
 
install
</code></pre>
<ul>
<li>运行安装脚本， sh mysql_install.sh</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[centos 挂载磁盘空间]]></title>
        <id>https://maguichang.github.io/post/centos-gua-zai-ci-pan-kong-jian/</id>
        <link href="https://maguichang.github.io/post/centos-gua-zai-ci-pan-kong-jian/">
        </link>
        <updated>2020-04-18T12:20:04.000Z</updated>
        <content type="html"><![CDATA[<p>最近安装CentOS 7服务器，为了方便快速，选择了默认分区安装，但是centos7默认分区的root大小为50G，也就是说如果硬件分配的总大小超过50G，剩余的所有空间都会分配给home。</p>
<pre><code>这时候软件如果装在/usr/local目录下，并且data等数据文件也配置在root下，则必须在装机后调整root的大小，否则运行一段时间后很容易导致磁盘空间不足。基于这种情况，我们只需要将调整一下home分区的大小预留为20G，将其他的空间都分配给root即可。

总体思路为：备份/home内容，然后将/home文件系统所在的逻辑卷删除，扩大/root文件系统，新建/home ，恢复/home内容
</code></pre>
<p>一、卸载home</p>
<pre><code> 1.1 备份home分区文件 

tar cvf /tmp/home.tar /home
 1.2 安装psmisc 

yum install -y psmisc
//Psmisc软件包包含三个帮助管理/proc目录的程序，安装下列程序: fuser、 killall、pstree和pstree.x11(到pstree的链接)

//fuser 显示使用指定文件或者文件系统的进程的PID。

//killall 杀死某个名字的进程，它向运行指定命令的所有进程发出信号。

//pstree 树型显示当前运行的进程。

//pstree.x11 与pstree功能相同，只是在退出前需要确认。

1.3 卸载/home文件系统 

umount /home
 如果提示无法卸载，是因为有进程占用/home，可以用下面的命令来停止占用的进程。  

fuser -km /home/
 1.4 删除/home所在的lv 

lvremove /dev/mapper/centos-home
</code></pre>
<p>二、扩大root</p>
<pre><code> 2.1 扩展/root所在的lv

 由于之前/home占用了342G的空间，故我考虑将加到/root里320G，剩下的留给/home。 

lvextend -L +320G /dev/mapper/centos-root
如果显示：logical volume centos/root successfully resized.则表示成功。

2.2 扩展/root文件系统 

xfs_growfs /dev/mapper/centos-root
这时可以使用df -h 检查一下root文件系统的空间看是不是已经改变了。
</code></pre>
<p>三、恢复home分区</p>
<pre><code> 3.1 重新创建home LV

这里我们先创建一个1G的home LV，然后再将所有的空闲分区追加到home LV

lvcreate -L 1G -n /dev/mapper/centos-home
lvextend -l +100%FREE /dev/mapper/centos-home
 3.2 创建home文件系统

mkfs.xfs  /dev/mapper/centos-home
 3.3 挂载home文件系统

mount /dev/mapper/centos-home
3.4 恢复home文件系统

tar xvf /tmp/home.tar -C /home/
cd /home/home/
mv * ../
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vim编辑器常用指令]]></title>
        <id>https://maguichang.github.io/post/vim-bian-ji-qi-chang-yong-zhi-ling/</id>
        <link href="https://maguichang.github.io/post/vim-bian-ji-qi-chang-yong-zhi-ling/">
        </link>
        <updated>2020-04-17T12:30:12.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-一般指令模式command-mode">一、一般指令模式（command mode）：</h2>
<h3 id="11-移动游标方法">1.1 移动游标方法</h3>
<table>
<thead>
<tr>
<th>指令</th>
<th>代表含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>[Ctrl]+[f]</td>
<td>向下移动一页，相当于[Page Down]</td>
</tr>
<tr>
<td>[Ctrl]+[b]</td>
<td>向上移动一页，相当于[Page Up]</td>
</tr>
<tr>
<td>0或者功能键[Home]</td>
<td>移动到行最左侧</td>
</tr>
<tr>
<td>$或者功能键[End]</td>
<td>移动到行最右侧</td>
</tr>
<tr>
<td><code>G</code></td>
<td>移动到文档最后一列</td>
</tr>
<tr>
<td>nG</td>
<td>n代表数字，移动到第n行(可配合:set nu)</td>
</tr>
<tr>
<td><code>gg</code></td>
<td>移动到第一行，相当于1G</td>
</tr>
<tr>
<td>n[Enter]</td>
<td>n为数字。游标向下移动n行</td>
</tr>
</tbody>
</table>
<h3 id="12-保存离开">1.2 保存离开</h3>
<table>
<thead>
<tr>
<th>指 令</th>
<th>代表含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>:q!</td>
<td>强制离开，不存储档案</td>
</tr>
<tr>
<td>:wq</td>
<td>储存后离开</td>
</tr>
</tbody>
</table>
<h3 id="13-删除-复制和粘贴">1.3 删除、复制和粘贴</h3>
<table>
<thead>
<tr>
<th>指令</th>
<th>代表含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>x,X</td>
<td>x为向后删除一个字符（相当于[del]），X为向前删除一个字符（相当于[backspace]）</td>
</tr>
<tr>
<td><code>dd</code></td>
<td>删除游标所在的一整行（可以理解为剪切，p对dd同样有效）</td>
</tr>
<tr>
<td>ndd</td>
<td>n表示数字，删除游标所在的向下n行</td>
</tr>
<tr>
<td><code>yy</code></td>
<td>复制游标所在行</td>
</tr>
<tr>
<td>nyy</td>
<td>n表示数字，复制游标所在的向下n行</td>
</tr>
<tr>
<td><code>p</code>,<code>P</code></td>
<td>p为粘贴插入到游标下一行，原始的文档向后推，P为上一行</td>
</tr>
<tr>
<td><code>u</code></td>
<td>复原上一个动作（撤销）</td>
</tr>
<tr>
<td>Ctrl+r</td>
<td>重复上一个动作</td>
</tr>
<tr>
<td><code>.</code></td>
<td>小数点，重复上一个动作</td>
</tr>
</tbody>
</table>
<h3 id="14-搜索与替换">1.4 搜索与替换</h3>
<table>
<thead>
<tr>
<th>指令</th>
<th>代表含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>/word</td>
<td>从光标处开始<code>向下</code>查找名为word的字符串</td>
</tr>
<tr>
<td>?word</td>
<td>从光标处开始<code>向上</code>查找名为word的字符串</td>
</tr>
<tr>
<td>n</td>
<td>重复上一个搜索动作</td>
</tr>
<tr>
<td>N</td>
<td>与n功能相反（反向搜索）</td>
</tr>
<tr>
<td>:n1,n2s/word1/word2/g</td>
<td>n1与n2为数字。在第n1与n2列之间寻找word1这个字串，并将该字串取代为word2 ！举例来说，在100到200列之间搜寻vim并取代为VIM则 :100,200s/vim/VIM/g</td>
</tr>
<tr>
<td>:1,$s/word1/word2/g</td>
<td>从第一列到最后一列寻找word1字串，并将该字串取代为word2</td>
</tr>
<tr>
<td>:1,$s/word1/word2/gc</td>
<td>从第一列到最后一列寻找word1字串，并将该字串取代为word2 ，且在取代前显示提示字元给使用者确认(confirm)是否需要取代</td>
</tr>
<tr>
<td>😒/old/new/</td>
<td>用old替换new，替换当前行的第一个匹配</td>
</tr>
<tr>
<td>😒/old/new/g</td>
<td>用old替换new，替换当前行的所有匹配</td>
</tr>
<tr>
<td>:%s/old/new/</td>
<td>用old替换new，替换所有行的第一个匹配</td>
</tr>
<tr>
<td>:%s/old/new/g</td>
<td>用old替换new，替换整个文件的所有匹配</td>
</tr>
</tbody>
</table>
<h3 id="15-撤销与重做">1.5 撤销与重做</h3>
<table>
<thead>
<tr>
<th>指令</th>
<th>代表含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>u</td>
<td>撤销(undo)</td>
</tr>
<tr>
<td>U</td>
<td>撤销对整行的操作</td>
</tr>
</tbody>
</table>
<h3 id="16-区块选择操作">1.6 区块选择操作</h3>
<table>
<thead>
<tr>
<th>指令</th>
<th>代表含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>v</td>
<td>字元选择，会将游标经过的地方反白选择！</td>
</tr>
<tr>
<td>V</td>
<td>列选择，会将游标经过的列反白选择！</td>
</tr>
<tr>
<td>Ctrl+v</td>
<td>区块选择，可以用长方形的方式选择资料</td>
</tr>
<tr>
<td>y</td>
<td>将反白的地方复制起来</td>
</tr>
<tr>
<td>d</td>
<td>将反白的地方删除掉</td>
</tr>
<tr>
<td>p</td>
<td>将刚刚复制的区块，在游标所在处贴上！</td>
</tr>
</tbody>
</table>
<h2 id="二-一般指令模式切换到编辑模式">二、一般指令模式切换到编辑模式：</h2>
<table>
<thead>
<tr>
<th>指令</th>
<th>代表含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>i或I</code></td>
<td>进入插入模式(Insert mode)：i为『从目前游标所在处插入』， I为『在目前所在列的第一个非空白字元处开始插入』。</td>
</tr>
<tr>
<td><code>a或A</code></td>
<td>进入插入模式(Insert mode)：a为『从目前游标所在的下一个字元处开始插入』， A为『从游标所在列的最后一个字元处开始插入』。</td>
</tr>
<tr>
<td><code>o或O</code></td>
<td>进入插入模式(Insert mode)：这是英文字母o的大小写。o为『在目前游标所在的下一列处插入新的一列』； O为在目前游标所在处的上一列插入新的一列！</td>
</tr>
<tr>
<td><code>r或R</code></td>
<td>进入取代模式(Replace mode)：r只会取代游标所在的那一个字元一次；R会一直取代游标所在的文字，直到按下ESC为止；</td>
</tr>
</tbody>
</table>
<h3 id="vim编辑器页面设置">vim编辑器页面设置</h3>
<table>
<thead>
<tr>
<th>指令</th>
<th>代表含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>:set nu</code></td>
<td>设置vim编辑器显示行号</td>
</tr>
<tr>
<td><code>:set nonu</code></td>
<td>取消行号</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[linux基础命令]]></title>
        <id>https://maguichang.github.io/post/linux-ji-chu-ming-ling/</id>
        <link href="https://maguichang.github.io/post/linux-ji-chu-ming-ling/">
        </link>
        <updated>2020-04-17T03:24:42.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-常用基础操作">一、常用基础操作</h2>
<h3 id="11-查看磁盘大小">1.1 查看磁盘大小</h3>
<pre><code>df -h
</code></pre>
<h3 id="12-查看内存大小">1.2 查看内存大小</h3>
<pre><code>free -h
</code></pre>
<h3 id="13-查看系统信息">1.3 查看系统信息</h3>
<pre><code>cat /etc/redhat-release
# 查看cpu信息
lscpu

# 查看cpu的个数
cat /proc/cpuinfo| grep &quot;physical id&quot;| sort| uniq| wc -l

# 查看每个物理CPU中core的个数（核数）
cat /proc/cpuinfo| grep &quot;cpu cores&quot;| uniq

# 查看逻辑CPU的个数
cat /proc/cpuinfo| grep &quot;processor&quot;| wc -l

# 查看CPU信息（型号）
cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c
</code></pre>
<h3 id="14-查看内核版本">1.4 查看内核版本</h3>
<pre><code>uname -a
</code></pre>
<h3 id="15-修改主机名">1.5 修改主机名</h3>
<ul>
<li>使用这个命令会立即生效且重启也生效</li>
</ul>
<pre><code>hostnamectl set-hostname mgc

vim /etc/hosts
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
127.0.0.1  mgc
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6

</code></pre>
<h3 id="16-查看端口号">1.6 查看端口号</h3>
<ul>
<li>centos7默认没有 netstat 命令，需要安装 net-tools 工具，yum install -y net-tools</li>
<li>ss(Socket Statistics的缩写)命令可以用来获取 socket统计信息（查询端口占用），比 netstat 更快速高效</li>
</ul>
<pre><code>netstat -tunlp|grep 端口号
或者
ss -anlp | grep 端口号
</code></pre>
<pre><code>ss命令参数
-n, –numeric 不解析服务名称
-r, –resolve 解析主机名
-a, –all 显示所有套接字（sockets）
-l, –listening 显示监听状态的套接字（sockets）
-o, –options 显示计时器信息
-m, –memory 显示套接字（socket）的内存使用情况
-p, –processes 显示使用套接字（socket）的进程
</code></pre>
<h3 id="17-防火墙相关">1.7 防火墙相关</h3>
<pre><code># centos7
firewall-cmd --state

service firewalld start 开启
service firewalld stop 关闭
</code></pre>
<ul>
<li>查看防火墙开放的端口信息</li>
</ul>
<pre><code>firewall-cmd --list-ports
</code></pre>
<ul>
<li>新增开放端口</li>
</ul>
<pre><code>firewall-cmd --zone=public --add-port=80/tcp --permanent

–-zone 作用域
–-add-port=80/tcp 添加端口，格式为：端口/通讯协议
–-permanent 永久生效，没有此参数重启后失效
</code></pre>
<ul>
<li>新增多个端口（区间）</li>
</ul>
<pre><code>firewall-cmd --zone=public --add-port=80-85/tcp --permanent
</code></pre>
<ul>
<li>重新加载防火墙规则</li>
</ul>
<pre><code>firewall-cmd --reload
</code></pre>
<ul>
<li>删除端口</li>
</ul>
<pre><code>firewall-cmd --zone=public --remove-port=80/tcp --permanent
</code></pre>
<h3 id="18-杀死进程与查看相关进程">1.8 杀死进程与查看相关进程</h3>
<pre><code>netstat -antp
kill -s 9 1827

其中-s 9 制定了传递给进程的信号是９，即强制、尽快终止进程。各个终止信号及其作用见附录。
</code></pre>
<h3 id="19-查看路由">1.9 查看路由</h3>
<pre><code>ip  route
</code></pre>
<h3 id="110罗列使用cpu资源最多的linux任务输入q退出">1.10罗列使用CPU资源最多的linux任务（输入q退出）</h3>
<pre><code>top   
</code></pre>
<h2 id="二-文件和目录">二、文件和目录</h2>
<h3 id="21-目录文件基础操作">2.1 目录文件基础操作</h3>
<pre><code>cd 进入目录
示例：cd /home 进入home目录    
cd ../    返回上一级目录
cd ../..    返回上两级目录
cd -    返回上次所在目录
cd ~    返回根目录


cp
cp file1 file1    文件复制
cp -a
cp -a dir1 dir2    复制一个目录
cp -a /tmp/dir1 .     复制一个目录到当前工作目录
（.代表当前目录）

ls    查看目录中的文件
ls -a    显示隐藏文件
ls -l    显示详细信息
ls -lrt    按时间显示文件（l表示详细列表，r表示反向排序，t表示按时间排序）

pwd    显示工作路径

mkdir dir1    创建dir1目录
mkdir dir1 dir2    同时创建两个目录
mkdir -p /tmp/dir1/dir2     创建一个目录树

mv dir1 dir2     移动/重命名一个目录

rm -f file1    删除文件file1
rm -rf dir1    删除目录dir1及其子目录
</code></pre>
<h3 id="22-查看文件内容">2.2 查看文件内容</h3>
<pre><code>cat file1 从第一个字节开始正向查看文件的内容
tac file1 从最后一行开始反向查看一个文件的内容


head -2 file1 查看一个文件的前两行
more file1 查看一个长文件的内容

tail -3 file1 查看一个文件的最后三行
tail -f file1 实时查看文件内容
</code></pre>
<h3 id="23-文本处理">2.3 文本处理</h3>
<pre><code>grep str /tmp/test 在文件 '/tmp/test' 中查找 &quot;str&quot;
grep ^str /tmp/test 在文件 '/tmp/test' 中查找以 &quot;str&quot; 开始的行
grep [0-9] /tmp/test 查找 '/tmp/test' 文件中所有包含数字的行
grep str -r /tmp/* 在目录 '/tmp' 及其子目录中查找 &quot;str&quot;
diff file1 file2 找出两个文件的不同处
sdiff file1 file2 以对比的方式显示两个文件的不同

</code></pre>
<h3 id="24-查找">2.4 查找</h3>
<pre><code>find / -name file1 从 '/' 开始进入根文件系统查找文件和目录
find / -user user1 查找属于用户 'user1' 的文件和目录
find /home/user1 -name \*.bin 在目录 '/home/user1' 中查找以 '.bin'结尾的文件
find /usr/bin -type f -atime +100 查找在过去100天内未被使用过的执行文件
find /usr/bin -type f -mtime -10 查找在10天内被创建或者修改过的文件
locate \*.ps 寻找以 '.ps' 结尾的文件，先运行 'updatedb' 命令
find -name '*.[ch]' | xargs grep -E'expr'在当前目录及其子目录所有.c和.h文件中查找 'expr'
find -type f -print0 | xargs -r0 grep -F 'expr'在当前目录及其子目录的常规文件中查找 'expr'
find -maxdepth 1 -type f | xargs grep -F 'expr' 在当前目录中查找'expr'
</code></pre>
<h2 id="三-yum工具">三、yum工具</h2>
<pre><code>yum -y install [package] 下载并安装一个rpm包
yum localinstall [package.rpm] 安装一个rpm包，使用你自己的软件仓库解决所有依赖关系
yum -y update 更新当前系统中安装的所有rpm包
yum update [package] 更新一个rpm包
yum remove [package] 删除一个rpm包
yum list 列出当前系统中安装的所有包
yum search [package] 在rpm仓库中搜寻软件包
yum clean [package] 清除缓存目录（/var/cache/yum）下的软件包
yum clean headers 删除所有头文件
yum clean all 删除所有缓存的包和头文件

</code></pre>
<h2 id="四-系统服务">四、系统服务</h2>
<pre><code>systemctl -at service
ls /etc/systemd/system/*.service 服务目录
ls /usr/lib/systemd/system/*.service
systemctl -t service --state=active 查看活动的服务
systemctl start name.service 启动服务（name=服务名）
systemctl stop name.service 停止服务
systemctl status name.service  查看服务器状态
systemctl is-enabled name 检查服务是否enabled
systemctl enable name.service 设置开机服务启动
systemctl disable name.service 禁用服务
systemctl daemon-reload  /etc/systemd/system/*.service 创建新的服务 
</code></pre>
<h2 id="五-用户相关">五、用户相关</h2>
<h3 id="51-新建用户">5.1 新建用户</h3>
<pre><code>adduser testuser //新建testuser 用户 
passwd testuser //给testuser 用户设置密码
</code></pre>
<h3 id="52-建工作组">5.2 建工作组</h3>
<p>groupadd testgroup //新建test工作组</p>
<h3 id="53-新建用户同时增加工作组">5.3 新建用户同时增加工作组</h3>
<pre><code>useradd -g testgroup testuser //新建testuser用户并增加到testgroup工作组

//注：：-g 所属组 -d 家目录 -s 所用的SHELL
</code></pre>
<h3 id="54-给已有的用户增加工作组">5.4 给已有的用户增加工作组</h3>
<p>usermod -G groupname username</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://maguichang.github.io/post/hello-gridea/</id>
        <link href="https://maguichang.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>